/**
 * SpecMint API - Enhance Endpoint
 *
 * Receives design specification and screenshot,
 * sends to AI (Claude/OpenAI) for enhanced analysis,
 * returns improved specification.
 */

const Anthropic = require('@anthropic-ai/sdk');
const { OpenAI } = require('openai');

// Initialize AI clients
const anthropic = process.env.ANTHROPIC_API_KEY
  ? new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY })
  : null;

const openai = process.env.OPENAI_API_KEY
  ? new OpenAI({ apiKey: process.env.OPENAI_API_KEY })
  : null;

// AI Enhancement prompt - STRICT PIXEL-PERFECT
const ENHANCEMENT_PROMPT = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–≤–µ—Ä—Å—Ç–∞–ª—å—â–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞: —Å–æ–∑–¥–∞—Ç—å –¢–û–ß–ù–£–Æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è Pixel-Perfect –≤–µ—Ä—Å—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê (–ù–ê–†–£–®–ï–ù–ò–ï = –û–®–ò–ë–ö–ê):
1. –ö–û–ü–ò–†–£–ô –¢–û–õ–¨–ö–û —Ü–≤–µ—Ç–∞ –∏–∑ —Å–µ–∫—Ü–∏–∏ "4. Color Palette" - –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π —Å–≤–æ–∏ —Ü–≤–µ—Ç–∞!
2. –ö–û–ü–ò–†–£–ô –¢–û–õ–¨–ö–û —Ä–∞–∑–º–µ—Ä—ã –∏–∑ —Å–µ–∫—Ü–∏–π "6. Complete Layer Hierarchy" –∏ "11. Layout & Style Map" - –ù–ï –æ–∫—Ä—É–≥–ª—è–π!
3. –ö–û–ü–ò–†–£–ô —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: border-radius, padding, gap - –ò–ó —Å–µ–∫—Ü–∏–∏ "1. Frame Properties" (Auto Layout)!
4. –ö–û–ü–ò–†–£–ô —à—Ä–∏—Ñ—Ç—ã –∏–∑ —Å–µ–∫—Ü–∏–∏ "5. Typography Styles" –∏ "9. Text Layers" - –ù–ï –∏–∑–æ–±—Ä–µ—Ç–∞–π —Å–≤–æ–∏!
5. –ö–û–ü–ò–†–£–ô spacing –∏–∑ —Å–µ–∫—Ü–∏–∏ "3. Spacing Between Sections" - —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è gap!
6. –ï–°–õ–ò —ç–ª–µ–º–µ–Ω—Ç–∞ –ù–ï–¢ –≤ "6. Complete Layer Hierarchy" - –ù–ï –£–ü–û–ú–ò–ù–ê–ô –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç–µ!
7. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏: scrollbar —Å—Ç–∏–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å overflow), –≤—Å–µ –æ—Ç—Å—Ç—É–ø—ã, –≤—Å–µ border-radius

üìã –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:

## üéØ –í–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–ø–æ –ø–æ—Ä—è–¥–∫—É –∏–∑ Layer Hierarchy)
–ü–µ—Ä–µ—á–∏—Å–ª–∏ –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–µ–∫—Ü–∏–∏ "6. Complete Layer Hierarchy" –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ:
- [Layer name 1] (type) - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- [Layer name 2] (type) - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
...

## üìê –¢–û–ß–ù–´–ï —Ä–∞–∑–º–µ—Ä—ã (–∫–æ–ø–∏—Ä—É–π –∏–∑ —Å–µ–∫—Ü–∏–∏ 6 –∏ 11!)
\`\`\`
Frame: [WIDTH –∏–∑ —Å–µ–∫—Ü–∏–∏ 1]x[HEIGHT –∏–∑ —Å–µ–∫—Ü–∏–∏ 1]px

Layer Hierarchy (–∫–æ–ø–∏—Ä—É–π —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è):
‚îú‚îÄ [Layer name]: [WIDTH]x[HEIGHT]px @([X], [Y])px
‚îÇ  ‚îú‚îÄ fill: [HEX –∏–∑ —Å–µ–∫—Ü–∏–∏ 4]
‚îÇ  ‚îú‚îÄ radius: [VALUE]px (–∫–æ–ø–∏—Ä—É–π —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!)
‚îÇ  ‚îú‚îÄ padding: [TOP]/[RIGHT]/[BOTTOM]/[LEFT]px (–∏–∑ autolayout)
‚îÇ  ‚îú‚îÄ gap: [VALUE]px (–∏–∑ itemSpacing)
‚îÇ  ‚îî‚îÄ children: [COUNT]
‚îú‚îÄ [Next layer]: ...
\`\`\`

## üé® –¢–û–ß–ù–´–ï —Ü–≤–µ—Ç–∞ (–¢–û–õ–¨–ö–û –∏–∑ —Å–µ–∫—Ü–∏–∏ 4!)
–ö–æ–ø–∏—Ä—É–π –í–°–ï —Ü–≤–µ—Ç–∞ –∏–∑ "4. Color Palette" –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏–π:
\`\`\`
[–ö–æ–ø–∏—Ä—É–π –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–µ–∫—Ü–∏–∏ 4 Color Palette]
–ù–∞–ø—Ä–∏–º–µ—Ä:
- #242422 ‚Äî opacity: 1
- #FFFFFF ‚Äî opacity: 0.15
- #000000 ‚Äî opacity: 1
...
\`\`\`

## üìù –¢–û–ß–ù–´–ï —à—Ä–∏—Ñ—Ç—ã (–¢–û–õ–¨–ö–û –∏–∑ —Å–µ–∫—Ü–∏–∏ 5 –∏ 9!)
–ö–æ–ø–∏—Ä—É–π –í–°–ï —à—Ä–∏—Ñ—Ç—ã –∏–∑ "5. Typography Styles" –∏ –ø—Ä–∏–º–µ–Ω—è–π –∫ —Ç–µ–∫—Å—Ç–∞–º –∏–∑ "9. Text Layers":
\`\`\`
[–ö–æ–ø–∏—Ä—É–π –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–µ–∫—Ü–∏–∏ 5]
–ù–∞–ø—Ä–∏–º–µ—Ä:
- Inter | 14px | weight:500 | line-height:20px | letter-spacing:0
- Inter | 12px | weight:400 | line-height:16px | letter-spacing:0
...

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ (–∏–∑ —Å–µ–∫—Ü–∏–∏ 9):
- "SpecMint" ‚Üí Inter 14px weight 500
- "12 Tokens" ‚Üí Inter 12px weight 400
\`\`\`

## üì± Layout (–∫–æ–ø–∏—Ä—É–π –∏–∑ —Å–µ–∫—Ü–∏–∏ 1 "Auto Layout")
\`\`\`
Frame Auto Layout:
  - Direction: [layoutMode –∏–∑ —Å–µ–∫—Ü–∏–∏ 1]
  - Gap: [itemSpacing]px
  - Padding: [top]px [right]px [bottom]px [left]px
  - Primary align: [primaryAxisAlignItems]
  - Counter align: [counterAxisAlignItems]

[–î–ª—è –∫–∞–∂–¥–æ–≥–æ child —Å autolayout –∫–æ–ø–∏—Ä—É–π —Ç–µ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã]
\`\`\`

## üîç –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏

### Spacing (–∫–æ–ø–∏—Ä—É–π –∏–∑ —Å–µ–∫—Ü–∏–∏ 3)
\`\`\`
Vertical gaps (–∫–æ–ø–∏—Ä—É–π —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è):
[–ö–æ–ø–∏—Ä—É–π –∏–∑ —Å–µ–∫—Ü–∏–∏ 3 "Spacing Between Sections"]

Horizontal gaps (–µ—Å–ª–∏ –µ—Å—Ç—å):
[–ö–æ–ø–∏—Ä—É–π –∏–∑ —Å–µ–∫—Ü–∏–∏ 3]
\`\`\`

### Border Radius (–∫–æ–ø–∏—Ä—É–π –∏–∑ —Å–µ–∫—Ü–∏–∏ 6 –∏ 11)
\`\`\`
[Layer name]: radius [VALUE]px (–∫–æ–ø–∏—Ä—É–π —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–µ–∫—Ü–∏–∏ 11)
[Layer name]: radius TL [X]px, TR [Y]px, BL [Z]px, BR [W]px
\`\`\`

### Scrollbar (–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç overflow)
–ï—Å–ª–∏ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –≤–∏–¥–µ–Ω scrollbar:
\`\`\`
Scrollbar:
  - width: [–æ–ø—Ä–µ–¥–µ–ª–∏ –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É]px
  - track: [—Ü–≤–µ—Ç –∏–∑ —Å–µ–∫—Ü–∏–∏ 4]
  - thumb: [—Ü–≤–µ—Ç –∏–∑ —Å–µ–∫—Ü–∏–∏ 4]
  - thumb-radius: [–æ–ø—Ä–µ–¥–µ–ª–∏]px
\`\`\`

### Effects (–∫–æ–ø–∏—Ä—É–π –∏–∑ —Å–µ–∫—Ü–∏–∏ 11)
–ï—Å–ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å effects (shadows, blur):
\`\`\`
[Layer name]: [—Å–∫–æ–ø–∏—Ä—É–π —Ç–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ effect –∏–∑ —Å–µ–∫—Ü–∏–∏ 11]
\`\`\`

‚ùó –ü–†–û–í–ï–†–û–ß–ù–´–ô –ß–ï–ö–õ–ò–°–¢ –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô:
- ‚úì –í—Å–µ HEX-–∫–æ–¥—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ "4. Color Palette" –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏–π?
- ‚úì –í—Å–µ —Ä–∞–∑–º–µ—Ä—ã (width/height/x/y) —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ "6. Complete Layer Hierarchy"?
- ‚úì –í—Å–µ border-radius —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ "11. Layout & Style Map"?
- ‚úì –í—Å–µ padding/gap —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ "1. Frame Properties" Auto Layout?
- ‚úì –í—Å–µ —à—Ä–∏—Ñ—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ "5. Typography Styles"?
- ‚úì –í—Å–µ spacing —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ "3. Spacing Between Sections"?
- ‚úì Scrollbar —Å—Ç–∏–ª—å –æ–ø–∏—Å–∞–Ω (–µ—Å–ª–∏ –≤–∏–¥–µ–Ω –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)?
- ‚úì –ù–ï –¥–æ–±–∞–≤–∏–ª —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ "6. Complete Layer Hierarchy"?
- ‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ 6?

–°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–Ø –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
`;

/**
 * Enhance specification using Claude (Anthropic)
 */
async function enhanceWithClaude(specMd, specJson, screenshot) {
  if (!anthropic) {
    throw new Error('Claude API key not configured');
  }

  try {
    // Prepare messages for Claude
    const messages = [
      {
        role: 'user',
        content: [
          {
            type: 'text',
            text: ENHANCEMENT_PROMPT + '\n\n' + specMd
          },
          {
            type: 'image',
            source: {
              type: 'base64',
              media_type: 'image/png',
              data: screenshot
            }
          }
        ]
      }
    ];

    // Call Claude API
    const response = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 4096,
      messages: messages
    });

    // Extract enhanced text
    const enhancedSpec = response.content[0].text;

    return {
      success: true,
      enhanced: enhancedSpec,
      model: 'claude-3.5-sonnet',
      tokensUsed: response.usage.input_tokens + response.usage.output_tokens
    };

  } catch (error) {
    console.error('Claude API error:', error);
    throw error;
  }
}

/**
 * Enhance specification using GPT-4o (OpenAI) with vision
 */
async function enhanceWithOpenAI(specMd, specJson, screenshot) {
  if (!openai) {
    throw new Error('OpenAI API key not configured');
  }

  try {
    console.log('Calling OpenAI GPT-4o with vision...');

    // Call GPT-4o API (supports vision)
    const response = await openai.chat.completions.create({
      model: 'gpt-4o', // Latest GPT-4 with vision support
      max_tokens: 4096, // Increased for detailed spec
      temperature: 0.1, // Very low for strict adherence
      messages: [
        {
          role: 'system',
          content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–≤–µ—Ä—Å—Ç–∞–ª—å—â–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ö–û–ü–ò–†–û–í–ê–¢–¨ —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ë–ï–ó –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏.

–ö–†–ò–¢–ò–ß–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –ö–û–ü–ò–†–£–ô HEX-–∫–æ–¥—ã –¢–û–õ–¨–ö–û –∏–∑ —Å–µ–∫—Ü–∏–∏ "4. Color Palette" - –ù–ï –∏–∑–æ–±—Ä–µ—Ç–∞–π —Å–≤–æ–∏ —Ü–≤–µ—Ç–∞!
2. –ö–û–ü–ò–†–£–ô —Ä–∞–∑–º–µ—Ä—ã –¢–û–õ–¨–ö–û –∏–∑ —Å–µ–∫—Ü–∏–π "6. Complete Layer Hierarchy" –∏ "11. Layout & Style Map" - –ù–ï –æ–∫—Ä—É–≥–ª—è–π!
3. –ö–û–ü–ò–†–£–ô border-radius, padding, gap –¢–û–õ–¨–ö–û –∏–∑ —Å–µ–∫—Ü–∏–π 1, 6, 11 - —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!
4. –ö–û–ü–ò–†–£–ô —à—Ä–∏—Ñ—Ç—ã –¢–û–õ–¨–ö–û –∏–∑ —Å–µ–∫—Ü–∏–∏ "5. Typography Styles" - –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Å–≤–æ–∏!
5. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏ scrollbar —Å—Ç–∏–ª–∏ (–µ—Å–ª–∏ –≤–∏–¥–µ–Ω –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
6. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏ overflow –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
7. –ù–ï –¥–æ–±–∞–≤–ª—è–π —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ "6. Complete Layer Hierarchy"

–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ü–∏–∏:
- –°–µ–∫—Ü–∏—è 1: Frame Properties (—Ä–∞–∑–º–µ—Ä—ã —Ñ—Ä–µ–π–º–∞, Auto Layout)
- –°–µ–∫—Ü–∏—è 3: Spacing Between Sections (—Ç–æ—á–Ω—ã–µ gap –∑–Ω–∞—á–µ–Ω–∏—è)
- –°–µ–∫—Ü–∏—è 4: Color Palette (–≤—Å–µ HEX –∫–æ–¥—ã)
- –°–µ–∫—Ü–∏—è 5: Typography Styles (–≤—Å–µ —à—Ä–∏—Ñ—Ç—ã)
- –°–µ–∫—Ü–∏—è 6: Complete Layer Hierarchy (–ø–æ–ª–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Å–ª–æ–µ–≤)
- –°–µ–∫—Ü–∏—è 9: Text Layers (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)
- –°–µ–∫—Ü–∏—è 11: Layout & Style Map (–¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏)

–ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–∏—Ö —Å–µ–∫—Ü–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å code blocks.
–¢–û–õ–¨–ö–û —Ç–æ—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ —Å–ø–µ–∫–∏ + —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ù–ï –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π, –ù–ï —É–ª—É—á—à–∞–π - –ö–û–ü–ò–†–£–ô!`
        },
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: ENHANCEMENT_PROMPT + '\n\n' + specMd
            },
            {
              type: 'image_url',
              image_url: {
                url: `data:image/png;base64,${screenshot}`,
                detail: 'high' // Request high-detail analysis
              }
            }
          ]
        }
      ]
    });

    // Extract enhanced text
    const enhancedSpec = response.choices[0].message.content;

    console.log('OpenAI response received:', {
      model: response.model,
      tokensUsed: response.usage.total_tokens,
      specLength: enhancedSpec.length
    });

    return {
      success: true,
      enhanced: enhancedSpec,
      model: 'gpt-4o',
      tokensUsed: response.usage.total_tokens
    };

  } catch (error) {
    console.error('OpenAI API error:', error);
    throw new Error(`OpenAI API failed: ${error.message}`);
  }
}

/**
 * Main API handler
 */
module.exports = async (req, res) => {
  // Enable CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // Handle preflight
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // Only accept POST
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { specMd, specJson, screenshot, provider = 'openai' } = req.body; // Default to OpenAI

    // Validate input
    if (!specMd || !screenshot) {
      return res.status(400).json({
        error: 'Missing required fields: specMd and screenshot are required'
      });
    }

    // Check screenshot size (max 20MB base64)
    if (screenshot.length > 20 * 1024 * 1024) {
      return res.status(400).json({
        error: 'Screenshot too large (max 20MB)'
      });
    }

    console.log(`Enhancing specification using ${provider}...`);
    console.log(`Spec length: ${specMd.length} chars`);
    console.log(`Screenshot length: ${screenshot.length} chars`);

    // Call AI provider
    let result;
    if (provider === 'openai' && openai) {
      result = await enhanceWithOpenAI(specMd, specJson, screenshot);
    } else if (provider === 'claude' && anthropic) {
      result = await enhanceWithClaude(specMd, specJson, screenshot);
    } else {
      // Fallback: try available provider
      if (anthropic) {
        result = await enhanceWithClaude(specMd, specJson, screenshot);
      } else if (openai) {
        result = await enhanceWithOpenAI(specMd, specJson, screenshot);
      } else {
        return res.status(503).json({
          error: 'No AI provider configured. Please set ANTHROPIC_API_KEY or OPENAI_API_KEY'
        });
      }
    }

    // Return enhanced specification
    return res.status(200).json(result);

  } catch (error) {
    console.error('Enhancement error:', error);

    return res.status(500).json({
      error: 'Enhancement failed',
      message: error.message,
      details: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};
